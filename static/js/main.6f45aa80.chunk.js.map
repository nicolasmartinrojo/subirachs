{"version":3,"sources":["components/CombinationsContainer.js","components/Tile.js","utils/itemFinder.js","Pages/SubirachsPage.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["CombinationsContainer","combinations","showCombinations","map","combination","i","key","onClick","positions","values","join","TileContainer","styled","div","props","theme","tileColor","tileColorHover","Tile","children","click","rest","numbers","recursiveSum","element","reduce","partial_sum","a","prepareCombination","position","SubirachsPage","findCombinations","pInicial","length","currPositions","concat","push","useState","hoveredCombinations","setHoveredCombinations","matchedPositions","setMatchedPositions","selectedPositions","setSelectedPositions","checkIfIsIncluded","index","console","log","includes","number","className","classNames","hovered","_matchedCombinations","filter","c","every","d","_matchedPositions","forEach","p","searchOcurrences","THEME","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f45aa80.chunk.js","sourcesContent":["import React from 'react';\n\nconst CombinationsContainer = ({combinations, showCombinations}) => (\n  <ul>\n    {combinations.map((combination, i) => (\n      <li\n        key={i}\n        onClick={() => {\n          showCombinations(combination.positions);\n        }}\n      >\n        {combination.values.join(' ')}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default CombinationsContainer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TileContainer = styled.div`\n  width: 25%;\n  height: 25%;\n  padding: 9px;\n  box-sizing: border-box;\n  div {\n    background-color: ${props => props.theme.tileColor};\n    font-size: 2em;\n    height: 100%;\n    border-radius: 6px;\n    color: #ccc;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    transition: 0.3s ease all;\n    &:hover {\n      background-color: ${props => props.theme.tileColorHover};\n    }\n  }\n  &.hovered div {\n    background-color: red;\n  }\n`;\nconst Tile = ({children, click, ...rest}) => {\n  return (\n    <TileContainer {...rest}>\n      <div onClick={click}>{children}</div>\n    </TileContainer>\n  );\n};\nexport default Tile;\n","const numbers = [1, 14, 14, 4, 11, 7, 6, 9, 8, 10, 10, 5, 13, 2, 3, 15];\nconst magic_number = 33;\nconst recursiveSum = positions =>\n  positions.map(element => numbers[element]).reduce((partial_sum, a) => partial_sum + a);\n\nconst prepareCombination = (...positions) => ({\n  positions: positions,\n  values: positions.map(position => numbers[position])\n});\nlet combinations = [];\n\nconst findCombinations = (positions = [], pInicial = 0) => {\n  for (let position = pInicial; position <= numbers.length - 1; position++) {\n    const currPositions = positions.concat(position);\n    if (recursiveSum(currPositions) === magic_number) {\n      combinations.push(prepareCombination(...currPositions));\n    } else if (recursiveSum(currPositions) < magic_number) {\n      findCombinations(currPositions, position + 1);\n    }\n  }\n  return combinations;\n};\n\nexport {findCombinations, numbers};\n","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport CombinationsContainer from '../components/CombinationsContainer';\nimport Tile from '../components/Tile';\nimport classNames from 'classnames';\nimport {findCombinations, numbers} from '../utils/itemFinder';\n\nconst TileContainer = styled.div`\n  background: #147ad5;\n  display: flex;\n  flex-wrap: wrap;\n  width: 500px;\n  height: 500px;\n`;\n\nconst SubirachsPage = () => {\n  const combinations = findCombinations();\n\n  const [hoveredCombinations, setHoveredCombinations] = useState([]);\n  const showCombinations = positions => {\n    console.log(positions);\n    setHoveredCombinations(positions);\n  };\n  const [matchedPositions, setMatchedPositions] = useState({});\n  const [selectedPositions, setSelectedPositions] = useState([]);\n\n  const searchOcurrences = position => {\n    const positions = [...selectedPositions, position];\n    const _matchedCombinations = combinations.filter(c =>\n      positions.every(d => c.positions.includes(d))\n    );\n    const _matchedPositions = {};\n    _matchedCombinations.forEach(c => {\n      c.positions.forEach(p => {\n        if (_matchedPositions[p]) {\n          _matchedPositions[p]++;\n        } else {\n          _matchedPositions[p] = 1;\n        }\n      });\n    });\n    setMatchedPositions(_matchedPositions);\n    setSelectedPositions(positions);\n  };\n  const checkIfIsIncluded = index => {\n    console.log(hoveredCombinations.includes(index));\n    return hoveredCombinations.includes(index);\n  };\n  return (\n    <>\n      <TileContainer>\n        {numbers.map((number, index) => (\n          <Tile\n            key={index}\n            className={classNames({hovered: checkIfIsIncluded(index)})}\n            click={() => searchOcurrences(index)}\n          >\n            {number}({matchedPositions[index]})\n          </Tile>\n        ))}\n      </TileContainer>\n      <CombinationsContainer combinations={combinations} showCombinations={showCombinations} />\n    </>\n  );\n};\n\nexport default SubirachsPage;\n","const THEME = {\n  tileColor: '#120f3f',\n  tileColorHover: '#557'\n};\n\nexport default THEME;\n","import React from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport SubirachsPage from './Pages/SubirachsPage';\nimport THEME from './theme';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={THEME}>\n      <div className=\"App\">\n        <SubirachsPage />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}